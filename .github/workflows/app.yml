name: Web App
on: 
  push:
    branches: [main]
jobs:
  packer_validate:
    runs-on: ubuntu-latest
    name: Validate Template
    steps:
      - name: Step 1 - Checkout code
        uses: actions/checkout@v2

      - name: Step 2 - Packer Init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: packer-ami.pkr.hcl

      - name: Step 3 - Packer Validate
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -var-file=variables.pkrvars.hcl -syntax-only
          target: packer-ami.pkr.hcl
  packer_build:
    needs: packer_validate
    runs-on: ubuntu-latest
    name: Build AMI
    steps:
      - name: Step 1 - Checkout code
        uses: actions/checkout@v2

      - name: install npm modules
        run: npm ci --production

      - name: zip files
        run: |
          zip -r webapp.zip ./
          
      - name: Step 2 - Packer Init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: packer-ami.pkr.hcl
      
      - name: Step 3 - Build Artifact
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: -var=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} -var=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} -var-file=variables.pkrvars.hcl -on-error=abort
          target: packer-ami.pkr.hcl
        env:
          PACKER_LOG: 1

      - name: Get AMI ID
        id: get_ami_id
        run: |
          ami_id=$(cat packer_manifest.json | jq -r '.builds[-1].artifact_id' | cut -d':' -f2)
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV
 
      # - name: Step 4 - Test
      #   id: vars
      #   run: |
      #     echo "ami_id=$(cat packer_manifest.json | jq -r '.builds[-1].artifact_id' | cut -d':' -f2)"
      #     echo "::set-output name=ami_id::$ami_id"
        # run: cat packer_manifest.json | jq -r '.builds[-1].artifact_id' | cut -d':' -f2

      - name: Test 5 output
        env:
          AMI_ID: ${{ env.AMI_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          echo $AMI_ID
          # echo "ami=$AMI_ID" >> "$GITHUB_OUTPUT"

      - name: Step 6 - Launch template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name asg_launch_template --launch-template-data '{"ImageId":"${{env.AMI_ID}}", "InstanceType":"t2.micro"}'
        env:
          AMI_ID: ${{ env.AMI_ID }} 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }} 
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }} 
          AWS_DEFAULT_REGION: 'us-east-1'

      - name: Step 7 - Launch template instance refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webapp_asg
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }} 
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }} 
          AWS_DEFAULT_REGION: 'us-east-1'